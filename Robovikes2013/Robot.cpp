// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
//Chassis* Robot::chassis = 0;
Pressurizer* Robot::pressurizer = 0;
Shifter* Robot::shifter = 0;
OI* Robot::oi = 0;
Shooter* Robot::shooter = 0;
Chassis* Robot::chassis = 0;
Intake* Robot::intake = 0;
Conveyor* Robot::conveyor = 0;
Arm* Robot::arm = 0;
Lights* Robot::lights = 0;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
double Robot::lOutput = 0;
double Robot::rOutput = 0;
LowPassFilter* Robot::leftFilter = 0;
LowPassFilter* Robot::rightFilter = 0;
void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	pressurizer = new Pressurizer();
	shifter = new Shifter();
	shooter = new Shooter();
	chassis = new Chassis();
	arm = new Arm();
	intake = new Intake();
	conveyor = new Conveyor();
	lights = new Lights();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	
	oi = new OI();
	const int leftY = 2;
	const int rightY = 5;
	SmartDashboard::PutNumber("RC", 0);
	SmartDashboard::PutNumber("Setpoint", 0);
	SmartDashboard::PutNumber("ArmP", 0);
	leftFilter = new LowPassFilter(Robot::oi->getDriver(), leftY);
	rightFilter = new LowPassFilter(Robot::oi->getDriver(), rightY);
	
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
  }
	
void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}
	
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}
	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
}
void Robot::TeleopPeriodic() {
	if (autonomousCommand != NULL)
		Scheduler::GetInstance()->Run();
	SmartDashboard::PutNumber("RC Read",SmartDashboard::GetNumber("RC"));
	lOutput = leftFilter->Calculate(SmartDashboard::GetNumber("RC")); 
	rOutput = rightFilter->Calculate(SmartDashboard::GetNumber("RC"));
	SmartDashboard::PutNumber("ArmVoltage", arm->potentiometer->GetAverageVoltage());
	SmartDashboard::PutNumber("lOutput", lOutput);
	SmartDashboard::PutNumber("rOutput", rOutput);
}
void Robot::TestPeriodic() {
	lw->Run();
}
START_ROBOT_CLASS(Robot);
